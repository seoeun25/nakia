buildscript {
    ext {
        springBootVersion = '2.0.0.M5'
        junitPlatformVersion = '1.0.1'
        junitJupiterVersion = '5.0.1'
        mapstructVersion = '1.2.0.Final'
        XPayClientVersion = "20171212"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.13")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'docker'
apply plugin: 'net.ltgt.apt'

group = 'com.lezhin.avengers'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "http://nexus.lezhin.net/repository/maven-public/" }
    maven { url "http://nexus.lezhin.net/repository/maven-3rdparty/" }

}

junitPlatform {
    // platformVersion '1.0.1'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

dependencies {
    compile('com.lezhin.server:lz-model:0.0.17-SNAPSHOT')
    compile('com.lezhin.server:lz-spring-boot-actuator-security-autoconfigure:0.0.1-SNAPSHOT')
    compile('com.google.guava:guava:22.0')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile("org.apache.commons:commons-pool2:2.4.3")
    compile("redis.clients:jedis:2.9.0")
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-configuration-processor')
    compile('org.apache.httpcomponents:httpclient:4.5.3')
    compile("javax.servlet:jstl")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")
    compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    apt("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    compile("org.mariadb.jdbc:mariadb-java-client:2.1.0")
    compile("mysql:mysql-connector-java:5.1.43")

    compile('com.google.cloud:gcloud-java-datastore:0.2.0') {
        exclude(group: 'com.fasterxml.jackson.core')
        exclude(group: 'org.apache.httpcomponents')
        exclude(module: 'guava-jdk5')
    }

    compileOnly('org.projectlombok:lombok')
    apt("org.projectlombok:lombok")
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('com.h2database:h2')
    testCompile('it.ozimov:embedded-redis:0.7.1')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    providedCompile("lgdacom.XPayClient:XPayClient:${XPayClientVersion}")
    providedCompile("lgdacom.XPayClient:commons-codec:${XPayClientVersion}")
    providedCompile("lgdacom.XPayClient:commons-httpclient:${XPayClientVersion}")
    providedCompile("lgdacom.XPayClient:commons-logging:${XPayClientVersion}")
    providedCompile("lgdacom.XPayClient:json_simple:${XPayClientVersion}")

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    // To avoid compiler warnings about @API annotations in JUnit code
    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
    // To use Log4J's LogManager
    testRuntime("org.apache.logging.log4j:log4j-core:2.9.0")
    testRuntime("org.apache.logging.log4j:log4j-jul:2.9.0")
    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

bootRun() {
    args = ["--spring.profiles.active=local"]
}

task docker(type: Docker, dependsOn: build) {
    push = System.env['CONTAINER_PUSH'] ? true : false
    registry = 'docker.lezhin.com'
    applicationName = 'panther'
    tagVersion = System.env['CONTAINER_VERSION']
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from war
            into stageDir
        }
        copy {
            from "conf/"
            into "$stageDir/conf"
        }
    }
}

